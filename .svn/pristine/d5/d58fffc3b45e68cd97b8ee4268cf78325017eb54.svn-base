package com.yzf.Cpaypos.ui.fragments;

import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.View;
import android.widget.TextView;

import com.afollestad.materialdialogs.DialogAction;
import com.afollestad.materialdialogs.MaterialDialog;
import com.yzf.Cpaypos.R;
import com.yzf.Cpaypos.adapter.CgiBankCardAdapter;
import com.yzf.Cpaypos.kit.AppUser;
import com.yzf.Cpaypos.model.ChooseItem;
import com.yzf.Cpaypos.model.servicesmodels.GetWhiteCardListResult;
import com.yzf.Cpaypos.present.PCardFragment;
import com.yzf.Cpaypos.ui.activitys.CgiBindCardActivity;
import com.yzf.Cpaypos.ui.activitys.ModifiedCreditCardctivity;
import com.yzf.Cpaypos.ui.activitys.PlanCardActivity;
import com.yzf.Cpaypos.widget.BottomDialog;
import com.yzf.Cpaypos.widget.StateView;

import java.util.ArrayList;

import butterknife.BindView;
import cn.droidlover.xdroidmvp.event.BusProvider;
import cn.droidlover.xdroidmvp.event.IEvent;
import cn.droidlover.xdroidmvp.log.Logger;
import cn.droidlover.xdroidmvp.mvp.XFragment;
import cn.droidlover.xdroidmvp.net.NetError;
import cn.droidlover.xdroidmvp.router.Router;
import cn.droidlover.xrecyclerview.XRecyclerContentLayout;
import cn.droidlover.xrecyclerview.XRecyclerView;
import rx.functions.Action1;

/**
 * 　　┏┓　　　┏┓+ +
 * 　┏┛┻━━━┛┻┓ + +
 * 　┃　　　　　　　┃
 * 　┃　　　━　　　┃ ++ + + +
 * ████━████ ┃+
 * 　┃　　　　　　　┃ +
 * 　┃　　　┻　　　┃
 * 　┃　　　　　　　┃ + +
 * 　┗━┓　　　┏━┛
 * 　　　┃　　　┃
 * 　　　┃　　　┃ + + + +
 * 　　　┃　　　┃
 * 　　　┃　　　┃ +  神兽镇楼
 * 　　　┃　　　┃    代码无bug
 * 　　　┃　　　┃　　+
 * 　　　┃　 　　┗━━━┓ + +
 * 　　　┃ 　　　　　　　┣┓
 * 　　　┃ 　　　　　　　┏┛
 * 　　　┗┓┓┏━┳┓┏┛ + + + +
 * 　　　　┃┫┫　┃┫┫
 * 　　　　┗┻┛　┗┻┛+ + + +
 * <p>
 * ClassName：FissionFragment
 * Description: 微创业页面
 * Author：JensenWei
 * QQ: 2188307188
 * Createtime：2017/5/18 11:55
 * Modified By：
 * Fixtime：2017/5/18 11:55
 * FixDescription：
 */

public class CardFragment extends XFragment<PCardFragment> {
    @BindView(R.id.title)
    TextView title;
    @BindView(R.id.toolbar)
    Toolbar toolbar;
    @BindView(R.id.cgibankcard_contentLayout)
    XRecyclerContentLayout contentLayout;
    private CgiBankCardAdapter adapter;
    StateView errorView;
    private int delposition = 0;

    @Override
    public void initData(Bundle savedInstanceState) {
        useEventBus(true);
        initView();
        if (savedInstanceState == null) {
            contentLayout.showLoading();
        }
        getP().getWhiteCardList(AppUser.getInstance().getUserId());
    }


    @Override
    public int getLayoutId() {
        return R.layout.fragment_card;
    }

    @Override
    public PCardFragment newP() {
        return new PCardFragment();
    }


    @Override
    public void bindEvent() {
        BusProvider.getBus().toObservable(IEvent.class)
                .subscribe(new Action1<IEvent>() {
                    @Override
                    public void call(IEvent iEvent) {
                        //TODO 事件处理
                        if (iEvent.getId().equals("refresh_card")) {
                            getP().getWhiteCardList(AppUser.getInstance().getUserId());
                        }
                    }
                });
    }


    /**
     * 初始化界面
     */
    private void initView() {
        initToolbar();
        initAdapter();
    }

    @Override
    public void onResume() {
        super.onResume();
    }

    /**
     * 初始化Toolbar
     */
    private void initToolbar() {
        toolbar.inflateMenu(R.menu.menu_bankcard);
        ((AppCompatActivity) getActivity()).setSupportActionBar(toolbar);
        ((AppCompatActivity) getActivity()).getSupportActionBar().setDisplayShowTitleEnabled(false);
        toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() {
            @Override
            public boolean onMenuItemClick(MenuItem item) {
                switch (item.getItemId()) {
                    case R.id.menu_bankcard:
                        String state = AppUser.getInstance().getStatus();
                        if (getP().isVerifyPass(state)) {
                            JumpActivity(CgiBindCardActivity.class, false);
                        }
                        break;
                }
                return true;
            }
        });
        title.setText("卡管理");
    }

    public void initAdapter() {
        if (adapter == null) {
            adapter = new CgiBankCardAdapter(context);
            adapter.setOnMyItemClickListener(new CgiBankCardAdapter.OnMyItemClickListener() {
                @Override
                public void myClick(View v, int pos, GetWhiteCardListResult.DataBean item) {
                    Router.newIntent(context)
                            .to(PlanCardActivity.class)
                            .putSerializable("dataBean", item)
                            .launch();
                }

                @Override
                public void mLongClick(View v, final int pos, final GetWhiteCardListResult.DataBean item) {
                    BottomDialog bottomDailog = new BottomDialog(context);
                    ArrayList<ChooseItem> imgArray = new ArrayList<>();
                    imgArray.add(new ChooseItem("删除银行卡", null));
                    imgArray.add(new ChooseItem("修改银行卡", null));
                    bottomDailog.showAlert(null, imgArray, new BottomDialog.OnAlertSelectId() {
                        @Override
                        public void onClick(int whichButton) {
                            if (whichButton == 0) {
                                showNoticeDialog("是否删除该银行卡", new MaterialDialog.SingleButtonCallback() {
                                    @Override
                                    public void onClick(@NonNull MaterialDialog dialog, @NonNull DialogAction which) {
                                        if (which == DialogAction.POSITIVE) {
                                            getvDelegate().showLoading();
                                            delposition = pos;
                                            getP().deleteBankCard(AppUser.getInstance().getUserId(), item.getAcctNo());
                                        }
                                    }
                                });
                            } else if (whichButton == 1) {
                                Router.newIntent(context)
                                        .to(ModifiedCreditCardctivity.class)
                                        .putSerializable("dataBean", item)
                                        .launch();
                            }
                        }
                    });
                }
            });

        }
        contentLayout.getSwipeRefreshLayout().setColorSchemeColors(getResources().getColor(R.color.theme));
        contentLayout.getRecyclerView().verticalLayoutManager(context);
        contentLayout.getRecyclerView().setAdapter(adapter);
        contentLayout.getRecyclerView().setOnRefreshAndLoadMoreListener(new XRecyclerView.OnRefreshAndLoadMoreListener() {
            @Override
            public void onRefresh() {
                Logger.i("onRefresh");
//                contentLayout.getRecyclerView().refreshData();
                getP().getWhiteCardList(AppUser.getInstance().getUserId());
            }

            @Override
            public void onLoadMore(int page) {
//                getP().GetOrderList(page, page_num, begin_time, end_time, merch_id, service_id, result, "", notServiceId);
            }
        });
        if (errorView == null) {
            errorView = new StateView(context);
        }
        contentLayout.errorView(errorView);
//        contentLayout.getRecyclerView().setRefreshEnabled(false);
        contentLayout.loadingView(View.inflate(context, R.layout.view_loading, null));
        contentLayout.emptyView(View.inflate(context, R.layout.view_empty, null));
    }

    /**
     * 解绑卡后刷新卡列表
     *
     * @param msg
     */
    public void refresh(String msg) {
        getvDelegate().toastShort(msg);
        adapter.removeElement(delposition);
    }

    public void showSnackbar(final String msg) {
        getvDelegate().showSnackbar(toolbar, msg, "", new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showToast(msg);
            }
        });
    }


    /**
     * activity跳转
     */
    public void JumpActivity(Class<?> activity, boolean isfinish) {
        Router.newIntent(context)
                .to(activity)
                .launch();
        if (isfinish) {
            Router.pop(context);
        }
    }

    public void JumpActivity(Class<?> activity, String serviceId) {
        Router.newIntent(context)
                .to(activity)
                .putString("serviceId", serviceId)
                .launch();
    }

    /**
     * 显示Toast
     *
     * @param msg
     */
    public void showToast(String msg) {
        getvDelegate().toastShort(msg);
    }

    public void JumpActivity(Class<?> activity) {
        Router.newIntent(context)
                .to(activity)
                .launch();
    }

    /**
     * 显示单按钮对话框
     *
     * @param msg
     */
    public void showErrorDialog(String msg) {
        getvDelegate().showErrorDialog(msg);
    }

    /**
     * 显示双按钮对话框
     *
     * @param msg
     * @param callback
     */
    public void showNoticeDialog(String msg, MaterialDialog.SingleButtonCallback callback) {
        getvDelegate().showNoticeDialog(msg, callback);
    }

    /**
     * 显示错误信息
     *
     * @param error
     */
    public void showError(NetError error) {
        getvDelegate().showError(error);
    }


    public void showErrorView(String msg, int id) {
        errorView.setMsg(msg);
        errorView.setImg(id);
        contentLayout.showError();
    }

    public void showErrorView(NetError error, int id) {
        errorView.setMsg(getvDelegate().getErrorType(error));
        errorView.setImg(id);
        contentLayout.showError();
    }

    public void setAdapter(GetWhiteCardListResult getWhiteCardListResult) {
        adapter.setData(getWhiteCardListResult.getData());
        if (adapter.getItemCount() < 1) {
            contentLayout.showEmpty();
            return;
        }
    }


}
